@model Hospital.Models.StockItemEntryModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_StockLayout.cshtml";
}
<script src="~/Scripts/OrderManagerScript.js"></script>
<script src="~/Scripts/json.cycle.js"></script>

<style>
    select {
        width: 210px;
        height: 27px;
    }
</style>


<h2 style="text-align: center;">Stock Item Entry Setup</h2>

@if (TempData["message"] != null || TempData["message"] != "")
{ 
    <p>
        @TempData["message"]
    </p>
}
<div class="contentWrapper">



    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)

        <div class="bs-docs-example form-inline">

            <fieldset>
                <legend>Create</legend>


                <div class="row-fluid singleline">
                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.StockCategoryId)</div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockCategoryId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.StockCategoryId, Hospital.Utility.GetCategory(), new { @onchange = "JqueryAjaxLoadSelectOption(this.value,'StockSubCategoryId','/AjaxRequest/GetSubCategory/')" })

                        </div>

                    </label>

                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.StockSubCategoryId)</div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockSubCategoryId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.StockSubCategoryId, Hospital.Utility.GetSubCategory())

                        </div>
                    </label>

                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.StockUnitId)</div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockUnitId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.StockUnitId, Hospital.Utility.GetUnit())

                        </div>


                    </label>


                    <label>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockSupplierId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.StockSupplierId, Hospital.Utility.GetSupplier(), "Select")

                        </div>
                    </label>
                </div>

                <div class="row-fluid singleline">

                    <label>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockItemTypeId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.StockItemTypeId, Hospital.Utility.GetItemType(), "Select")

                        </div>
                    </label>
                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.StockItemName)</div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.StockItemName)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.StockItemName)

                        </div>
                    </label>

                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.PageNumber)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PageNumber)

                        </div>
                    </label>

                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.MinStockQuantity)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.MinStockQuantity)

                        </div>
                    </label>
                </div>

                <div class="row-fluid singleline">

                    <label>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.MaxStockQuantity)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.MaxStockQuantity)

                        </div>
                    </label>

                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.OpeningStock)</div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OpeningStock)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OpeningStock)

                        </div>
                    </label>

                    <label>
                        <div class="size">@Html.ValidationMessageFor(model => model.GroupId)</div>
                        <div class="editor-label">
                            Group Name
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.GroupId, Hospital.Utility.GetStockItemGroupLists())

                        </div>
                    </label>


                </div>


                <p>
                    <input type="submit" value="Create" />
                </p>
            </fieldset>
        </div>
    }
    </div>
    <div id="linkNewBack">
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts
{
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/jqueryui")


        <script type="text/javascript">
            var autocom = $.noConflict();

            autocom(document).ready(function () {
                //alert();


                autocom("#StockItemName").autocomplete({
                    source: function (request, response) {
                        autocom.ajax({
                            url: "/StockItemEntry/AutocompleteItem",
                            type: "GET",
                            dataType: "json",
                            data: { s: request.term },
                            success: function (data) {

                                response(autocom.map(data, function (item) {

                                    return { label: item, value: "" };


                                }))

                            },
                            //error:function(data){
                            //    response($.map(data, function (item) {

                            //        return { label: item.StockUnitName, Value: item.StockUnitName };
                            //    }))
                            //}
                        })
                    },
                    messages: {
                        noResults: "", results: ""
                    }
                });
            });
        </script>

    }
    <script type="text/javascript">
        var j = $.noConflict();
        function JqueryAjaxLoadSelectOption(selValue, targetElm, url) {

            j.ajax({
                async: false,
                type: "POST",
                url: url + selValue,
                contentType: "text/json",
                data: ({ id: selValue }),
                beforeSend: function () {
                    j("#" + targetElm).attr('disabled', 'disabled');
                    j("#" + targetElm).addClass('ac_loading');
                },

                success: function (jsonResult) {

                    var evlResult = JSON.retrocycle(jsonResult);
                    var selOption = "";
                    selOption = ParseJsonResultForSelectOptions(evlResult);

                    tempTargetElm = targetElm.split(',');
                    for (var i = 0; i < tempTargetElm.length; i++) {
                        // alert(tempTargetElm.length + " : " + tempTargetElm[i]);
                        j("#" + tempTargetElm[i]).empty().append(selOption);
                        j("#" + tempTargetElm[i]).removeClass('ac_loading');
                        j("#" + tempTargetElm[i]).removeAttr('disabled');
                    }


                },
                error: function (jsonResult) {

                }
            });

            function ParseJsonResultForSelectOptions(evlResult) {
                var selOption = "";
                j.each(evlResult, function (key, item) {
                    var isSelected = (item['Selected'] == "true") ? "Selected='Selected'" : "";
                    //var otherAttrib = (item['Attribs']!=undefined)? item['Attribs']:"";
                    var otherAttrib = "";
                    j.each(item, function (name, value) {
                        if (name != 'Selected' && name != 'Value' && name != 'Text') {
                            otherAttrib += " " + name + '="' + value + '" ';
                        }
                    });
                    selOption += "<option value='" + item['Value'] + "' " + isSelected + " " + otherAttrib + " >"
                    + evlResult[key].Text + "</option>";
                });

                return selOption;
            }

        }
    </script>
