@model Hospital.Models.StockItemEntryModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_StockLayout.cshtml";
}


   <style>

 select {

      width: 210px;
        height: 27px;
  
   }



    </style>
<script src="~/Scripts/OrderManagerScript.js"></script>
<script src="~/Scripts/json.cycle.js"></script>

<h2 style="text-align:center;">Stock Item Entry Setup</h2>

@if (TempData["message"] != null || TempData["message"] != "") { 
    <p>
        @TempData["message"]
    </p>
}
<div class="contentWrapper">



@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
      @Html.HiddenFor(model=>model.StockItemEntryId)
    <div class="bs-docs-example form-inline">
    
        <fieldset>
        <legend>Edit</legend>

        
            <div class="row-fluid singleline">
                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.StockCategoryId)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockCategoryId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StockCategoryId,Hospital.Utility.GetCategory(), new {  @onchange = "JqueryAjaxLoadSelectOption(this.value,'StockSubCategoryId','/AjaxRequest/GetSubCategory/')" })
            
        </div>

                    </label>

                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.StockSubCategoryId)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockSubCategoryId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StockSubCategoryId,Hospital.Utility.GetSubCategory(Model.StockCategoryId))
            
        </div>
        </label>

                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.StockUnitId)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockUnitId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StockUnitId,Hospital.Utility.GetUnit())
            
        </div>


                    </label>


                <label>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockSupplierId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StockSupplierId, Hospital.Utility.GetSupplier(), "Select")
           
        </div>
                    </label>
                </div>

            <div class="row-fluid singleline">

                <label>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockItemTypeId)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.StockItemTypeId, Hospital.Utility.GetItemType(), "Select")
            
        </div>
                    </label>
                <label>
<div class="size">@Html.ValidationMessageFor(model => model.StockItemName)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.StockItemName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.StockItemName)
            
        </div>
                    </label>

                <label>

        <div class="editor-label">
            @Html.LabelFor(model => model.PageNumber)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.PageNumber)
           
        </div>
                    </label>

                <label>

        <div class="editor-label">
            @Html.LabelFor(model => model.MinStockQuantity)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MinStockQuantity)
           
        </div>
                    </label>
                </div>

            <div class="row-fluid singleline">

                <label>
        <div class="editor-label">
            @Html.LabelFor(model => model.MaxStockQuantity)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MaxStockQuantity)
           
        </div>
                    </label>
                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.OpeningStock)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.OpeningStock)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.OpeningStock)
            
        </div>
                    </label>
                </div>
        

        <p>
            <input type="submit" value="Edit" />
        </p>
    </fieldset>
        </div>
}

<div id="linkNewBack">
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    var j = $.noConflict();
    function JqueryAjaxLoadSelectOption(selValue, targetElm, url) {

        j.ajax({
            async: false,
            type: "POST",
            url: url + selValue,
            contentType: "text/json",
            data: ({ id: selValue }),
            beforeSend: function () {
                j("#" + targetElm).attr('disabled', 'disabled');
                j("#" + targetElm).addClass('ac_loading');
            },

            success: function (jsonResult) {

                var evlResult = JSON.retrocycle(jsonResult);
                var selOption = "";
                selOption = ParseJsonResultForSelectOptions(evlResult);

                tempTargetElm = targetElm.split(',');
                for (var i = 0; i < tempTargetElm.length; i++) {
                    // alert(tempTargetElm.length + " : " + tempTargetElm[i]);
                    j("#" + tempTargetElm[i]).empty().append(selOption);
                    j("#" + tempTargetElm[i]).removeClass('ac_loading');
                    j("#" + tempTargetElm[i]).removeAttr('disabled');
                }


            },
            error: function (jsonResult) {

            }
        });

        function ParseJsonResultForSelectOptions(evlResult) {
            var selOption = "";
            j.each(evlResult, function (key, item) {
                var isSelected = (item['Selected'] == "true") ? "Selected='Selected'" : "";
                //var otherAttrib = (item['Attribs']!=undefined)? item['Attribs']:"";
                var otherAttrib = "";
                j.each(item, function (name, value) {
                    if (name != 'Selected' && name != 'Value' && name != 'Text') {
                        otherAttrib += " " + name + '="' + value + '" ';
                    }
                });
                selOption += "<option value='" + item['Value'] + "' " + isSelected + " " + otherAttrib + " >"
                + evlResult[key].Text + "</option>";
            });

            return selOption;
        }

    }
</script>


