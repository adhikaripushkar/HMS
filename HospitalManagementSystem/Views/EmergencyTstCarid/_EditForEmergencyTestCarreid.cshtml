@model HospitalManagementSystem.Models.EmergencyTstCaridModel



<style>
    select {
        width: 210px;
        height: 27px;
    }
</style>


<script src="~/Scripts/jquery-1.7.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="@Url.Content("~/Scripts/OrderManagerScript.js")" type="text/javascript"></script>
<script src="~/Scripts/json.cycle.js"></script>

@using (Html.BeginForm("EditForEmergencyTestCarreid", "EmergencyTstCarid", FormMethod.Post, new { @id = "EditForEmergencytestCarriedId", @class = "bs-docs-example form-inline" })) 
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Edit</legend>

        <div class="editor-label">
            @Html.HiddenFor(model => model.EmTestd)
        </div>
        <div class="editor-field">
            @Html.HiddenFor(model => model.EmTestd)
            @Html.ValidationMessageFor(model => model.EmTestd)
        </div>

        <div class="editor-label">
            @Html.HiddenFor(model => model.EmergencyMasterId)
        </div>
        <div class="editor-field">
            @Html.HiddenFor(model => model.EmergencyMasterId)
            @Html.ValidationMessageFor(model => model.EmergencyMasterId)
        </div>
          <div class="row-fluid singleline">
              <label>
<div class="size">  @Html.ValidationMessageFor(model => model.SectionId)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SectionId)
        </div>
        <div class="editor-field">

                   @Html.DropDownListFor(model => model.SectionId, HospitalManagementSystem.Utility.GetSectionList(), new { @required = "@required", @onchange = "JqueryAjaxLoadSelectOption(this.value,'TestId','/AjaxRequest/GetTestforedit/')" })
@*              @Html.DropDownListFor(model => model.SectionId, HospitalManagementSystem.Utility.GetSectionById(Model.SectionId))*@
           @*@Html.EditorFor(model => model.SectionId,@HospitalManagementSystem.Utility.GetSectionNameById(Model.SectionId))*@
          
        </div>
</label>
              <label>
                  @*<div class="size">  @Html.ValidationMessageFor(model => model.TestId)</div>*@
        <div class="editor-label">
            @Html.LabelFor(model => model.TestId)
        </div>
        <div class="editor-field">
                 @Html.DropDownListFor(model => model.TestId, HospitalManagementSystem.Utility.GettstById(Model.SectionId), new { @required = "@required"  })
               @*  @Html.DropDownListFor(model => model.SectionId, HospitalManagementSystem.Utility.GettstById(Model.TestId))*@
           @* @Html.EditorFor(model => model.TestId)*@
          
        </div>
                  </label>
              </div>
  <div class="row-fluid singleline">
      <label>
          <div class="size">    @Html.ValidationMessageFor(model => model.ShortDecs)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ShortDecs)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ShortDecs)
        
        </div>
          </label>
      <label>  
           <div class="size">     @Html.ValidationMessageFor(model => model.LongDesc)</div>      
          <div class="editor-label">
            @Html.LabelFor(model => model.LongDesc)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LongDesc)
       
        </div>
          </label>
      <label>
           <div class="size">   @Html.ValidationMessageFor(model => model.Remarks)</div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Remarks)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Remarks)
         
        </div>
          </label>
      </div>
        <div class="editor-label">
            @Html.HiddenFor(model => model.Status)
        </div>
        <div class="editor-field">
            @Html.HiddenFor(model => model.Status)
            @Html.ValidationMessageFor(model => model.Status)
        </div>

        <p>
            <input type="submit" value="Save" id="btnid" />
        </p>
    </fieldset>
}
<script>
    $("#btnid").live("click", function (e) {
        e.preventDefault();
        var form = $('#EditForEmergencytestCarriedId');
        var url = form.attr("action");
        var formData = form.serialize();
        $.post(url, formData, function (data) {
            $('#EmTCId').empty();
            $('#EmTCId').html(data);
            $('#EditForEmergencytestCarriedId').remove();
        });
    });
    </script>
<script type="text/javascript">
    function JqueryAjaxLoadSelectOption(selValue, targetElm, url) {
        $.ajax({
            async: false,
            type: "POST",
            url: url + selValue,
            contentType: "text/json",
            data: ({ id: selValue }),
            beforeSend: function () {
                $("#" + targetElm).attr('disabled', 'disabled');
                $("#" + targetElm).addClass('ac_loading');
            },

            success: function (jsonResult) {
                //alert(jsonResult);
                var evlResult = JSON.retrocycle(jsonResult);
                var selOption = "";
                selOption = ParseJsonResultForSelectOptions(evlResult);
                tempTargetElm = targetElm.split(',');
                for (var i = 0; i < tempTargetElm.length; i++) {
                    // alert(tempTargetElm.length + " : " + tempTargetElm[i]);
                    $("#" + tempTargetElm[i]).empty().append(selOption);
                    $("#" + tempTargetElm[i]).removeClass('ac_loading');
                    $("#" + tempTargetElm[i]).removeAttr('disabled');
                }


            },
            error: function (jsonResult) {
            }
        });

        function ParseJsonResultForSelectOptions(evlResult) {
            var selOption = "";
            $.each(evlResult, function (key, item) {
                var isSelected = (item['Selected'] == "true") ? "Selected='Selected'" : "";
                //var otherAttrib = (item['Attribs']!=undefined)? item['Attribs']:"";
                var otherAttrib = "";
                $.each(item, function (name, value) {
                    if (name != 'Selected' && name != 'Value' && name != 'Text') {
                        otherAttrib += " " + name + '="' + value + '" ';
                    }
                });
                selOption += "<option value='" + item['Value'] + "' " + isSelected + " " + otherAttrib + " >"
                + evlResult[key].Text + "</option>";
            });
            return selOption;
        }

    }



</script>
@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
