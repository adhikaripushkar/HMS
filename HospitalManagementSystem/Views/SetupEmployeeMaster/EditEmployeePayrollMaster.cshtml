@model Hospital.Models.SetupEmployeeMasterModel

@{
    ViewBag.Title = "EditEmployeePayrollMaster";
    Layout = "~/Views/Shared/_PayRollLayout.cshtml";
}

<style>
    select {
        width: 208px;
        height: 27px;
    }
</style>
<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery.maskedinput.js"></script>
<script src="~/Scripts/json.cycle.js"></script>
<script src="@Url.Content("~/Scripts/OrderManagerScript.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {
        AddClickEvents();
        GetTotalNoOfMonth();
    });
</script>

<h2 style="text-align: center;">Edit Employee Payroll Setup</h2>

<div class="contentWrapper">

    <div class="bs-docs-example form-inline">

        @using (Html.BeginForm("EditEmployeePayrollMaster", "SetupEmployeeMaster", FormMethod.Post, new { }))
        {
            <fieldset>
                <legend style="width: 1000px;">Payroll Detail</legend>
                <div class="row-fluid singleline">
                     <label>
                        <div class="editor-field">
                            @Html.HiddenFor(model => model.EmployeeMasterId, new {@id="EmployeeID"})
                            @Html.HiddenFor(model => model.Noofjoinmonth, new {@id="Noofjoinmonth"})
                        </div>
                    </label>
                     <h5 style="text-align: left;"><b>
                    <label>                       
                        <div class="editor-label">
                            @Html.Label("Employee Name")
                        </div>
                        <div class="editor-field">
                             @Html.LabelFor(model => model.EmployeeFullName, Hospital.Utility.GetEmployeeNameFromEmpID(Model.EmployeeMasterId))
                        </div>
                    </label> </b></h5>
                </div>

                <div class="row-fluid singleline">
                    <label>
                        <div class="editor-label">
                            @Html.Label("Bank")
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.BankID, Hospital.Utility.GetBank())
                        </div>
                    </label>
                         <label>
                        <div class="editor-label">
                            @Html.Label("Bank Account No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BankAccountNo, new {@onblur="CalculateFundAndAdvance();"})
                        </div>
                    </label>
                     <label>
                        <div class="editor-label">
                            @Html.Label("Basic Salary")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BasicSalary, new { @id = "BasicSalaryClass",@onblur="Calculate();"})
                        </div>
                    </label>
                </div>
             
                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;">Addition</legend>
                  <div style="height: 275px; border: solid 1px #1C5183; position: relative; width: 1000px;">
                    <div id="Addition">
                        <div class="row-fluid singleline">       
                    <label>
                        <div class="editor-label">
                            @Html.Label("Grade No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.GradeNo, new { @id = "GradeNoClass"})

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Grade Rate")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.GradeRate, new { @id = "GradeRateClass" })
                        </div>
                    </label>
                    <label>
                        <div class="editor-label">
                            @Html.Label("Grade Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.GradeAmount, new { @id = "GradeAmountClass"  ,@onKeyUp="Calculate();"})
                        </div>
                    </label>
                </div>
                <div class="row-fluid singleline">  
                    <label>
                        <div class="editor-label">
                            @Html.Label("PF No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PFNo)

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("PF Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PFAmount, new { @id = "PFAmountClass" })

                        </div>
                    </label>

                              <label>
                        <div class="editor-label">
                            @Html.Label("Insurance No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.InsuranceNo)

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Insurance Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.InsuranceAmount, new { @id = "InsuranceAmount" })

                        </div>
                    </label>


                </div>

                         <div class="row-fluid singleline">                  
                   
                                     
                     <label>
                        <div class="editor-label">
                            @Html.Label("Festival Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FestivalAmount, new { @id = "FestivalAmount"})

                        </div>
                    </label>

                              <label>
                        <div class="editor-label">
                            @Html.Label("Dress Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DressAllowance, new { @id = "DressAllowance"})

                        </div>
                    </label>

                              <label>
                        <div class="editor-label">
                            @Html.Label("Dearness Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.DearnessAllowance, new { @id = "DearnessAllowance"})

                        </div>
                    </label>
                              </div>

                        <div class="row-fluid singleline">   
                            <label>
                        <div class="editor-label">
                            @Html.Label("Total Present Days")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PresentDay, new { @id = "PresentDay", @onblur = "CalculateLeaveAmount();"})
                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("OverTime Duration")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OverTimeDuration, new { @id = "OverTimeDuration", @Onblur = "CalculateOvertime();" })
                        </div>
                    </label>

                            <label>
                        <div class="editor-label">
                            @Html.Label("OverTime(In)")
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.OTHrDay, Hospital.Utility.GetDayOrHour(),new { @id = "OTHrDay" })
                        </div>
                    </label>

                   <label>
                         <div class="editor-label">
                            @Html.Label("OverTime Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OverTimeAmount, new { @id = "OverTimeAmount"})
                        </div>
                    </label>

                </div>
                    </div>                           
                  </div>                 
                </fieldset>

                <fieldset>
                     <legend style="font-size: medium; color: #1C5183; width: 1000px;">Allowance</legend>
                <div class="well well-small" id="Add-Item">
                     @Html.ActionLink("Add", "_EmployeeAllowanceSetup", null, new { @class = "addProductItem btn btn-primary" })

                    <table id="particularTable" style="width:50%;">
                        <tr>
                             <td class="span2" style="border:none; text-align:left;">Allowance</td>
                            <td class="span2" style="border:none; text-align:left;">Amount</td>
                        </tr>
                        <tr>
                        </tr>                       
                      </table>
                      @foreach (var item in Model.EmployeeAllowanceSetupModelList)
                               {
                                 @Html.Partial("_EmployeeAllowanceSetup",item)                            
                               }
                    </div>
                     <div class="row-fluid singleline">
                    <label>
                        <div class="editor-label">
                            @Html.Label("Total Allowance Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TotalAllowance, new { @id = "TotalAllowance" ,@onKeyUp="CalculateTotalAmount();" })
                        </div>
                    </label>
                </div>
                </fieldset>
                 
               @* <div class="row-fluid singleline">
                    <label>
                        <div class="editor-label">
                            @Html.Label("Total Income(Yearly)")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model=>model.TotalIncome, new {@id="TotalIncomeAmount", @readonly = "readonly"  ,@onKeyUp="CalculateTotalIncome();"})
                        </div>
                    </label>
                </div>*@

                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;"></legend>
                  <div style="height: 270px; border: solid 1px #1C5183; position: relative; width: 1000px;">
                    <div id="Deduction">
                        
                        <div class="row-fluid singleline">   
                    <label>
                        <div class="editor-label">
                            @Html.Label("Fund No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FundNo)
                        </div>
                    </label>
                                     
                    <label>
                        <div class="editor-label">
                            @Html.Label("Fund Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FundAmount, new { @id = "FundAmount" })
                        </div>
                    </label>
                 
                </div>

                        <div class="row-fluid singleline">                  
                    <label>
                        <div class="editor-label">
                            @Html.Label("CIT No")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CITNo)

                        </div>
                    </label>
                              
                             <label>
                        <div class="editor-label">
                            @Html.Label("CIT(%)")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CITPercentage, new { @id = "CitPercentage" ,@onKeyUp="CalculateCitAmount();"})

                        </div>
                    </label>
                                   
                    <label>
                        <div class="editor-label">
                            @Html.Label("CIT Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.CITAmount, new { @id = "CitAmount" ,@onKeyUp="CalculateCitAmount();" })

                        </div>
                    </label>
                            </div>

                        <div class="row-fluid singleline">                  
                      <label>
                        <div class="editor-label">
                            @Html.Label("Loan Deduction")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LoanDeduction, new { @id = "LoanDeduction"})
                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Loan Interest")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LoanInterest, new { @id = "LoanInterest"})

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Advance Deduction")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.AdvanceDeduction, new { @id = "AdvanceDeduction"})

                        </div>
                    </label>                 
                </div>

                        <div class="row-fluid singleline">         
                            
                              <label>
                        <div class="editor-label">
                            @Html.Label("PF Deduction Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PFDeductAmount, new { @id="PfDeductionClass"})

                        </div>
                    </label>
                                     
                    <label>
                        <div class="editor-label">
                            @Html.Label("Insurance Deduction Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.InsuranceDeductAmount, new { @id = "InsuranceDeductionAmount" ,@onblur="CalculateInsuranceAmount();"})
                        </div>
                    </label>
                   
                    <label>
                        <div class="editor-label">
                            @Html.Label("Leave Deduction")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LeaveDeduction, new { @id = "LeaveDeduction"})

                        </div>
                    </label>

                </div>
                    </div>                           
                  </div>                 
                </fieldset>

                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;"></legend>
                    <div class="well well-small" id="Add-Item1">
                    @Html.ActionLink("Add", "_EmployeeDeductionSetup", null, new { @class = "addProductItem btn btn-primary" })

                    <table id="particularTable1" style="width:50%;">
                        <tr>
                            <td class="span2" style="border:none; text-align:left;">Deduction</td>
                            <td class="span2" style="border:none; text-align:left;">Amount</td>
                        </tr>
                        <tr>
                        </tr>                       
                      </table>
                         @foreach (var item in Model.EmployeeDeductionSetupModelList)
                               {
                                 @Html.Partial("_EmployeeDeductionSetup",item)                            
                               }
                    </div>  
                     
                        <div class="row-fluid singleline">       
                    <label>
                        <div class="editor-label">
                            @Html.Label("Total Deduction Amount")
                        </div>
                        <div class="editor-field">
                              @Html.TextBoxFor(model => model.TotalDeduction, new { @id = "TotalDeduction",@onKeyUp="CalculateTotalAmount();" })
                        </div>
                    </label>
                </div>
                </fieldset>

               @* <div class="row-fluid singleline">
                    <label>
                        <div class="editor-label">
                            @Html.Label("Total Taxable Amount(Yearly)")
                        </div>
                        <div class="editor-field">
                             @Html.TextBoxFor(model=> model.TotalTaxableAmount, null, new {@id="TotalTaxableAmount", @readonly = "readonly"  ,@onKeyUp="CalculateTotalTaxableAmount();"})
                        </div>
                    </label>
                </div>*@
              
                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;"></legend>
                  <div style="height: 75px; border: solid 1px #1C5183; position: relative; width: 1000px;">
                 <div class="row-fluid singleline">         
                            
                        
                    <label>
                        <div class="editor-label">
                            @Html.Label("Insurance Premium Paid(Yearly)")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EmpInsurancePaid, new { @id="IPP",@onblur="CalculateInsuranceAmount();"})

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Remote Area Deduction(Yearly)")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.RemoteAreaDeduction, new { @id="RAD"})
                        </div>
                    </label>

                     <label>
                        <div class="editor-label">
                            @Html.Label("Physical Disability(Yearly)")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PhysicalDisability, new { @id="PhyDis"})
                        </div>
                    </label>

                </div>
                      </div>
                      </fieldset>

                @*<div class="row-fluid singleline">
                    <label>
                        <div class="editor-label">
                            @Html.Label("Net Taxable Amount(Yearly)")
                        </div>
                        <div class="editor-field">
                               @Html.TextBoxFor(model=>model.NetTaxableAmount, null, new {@id="NetTaxableAmount", @readonly = "readonly" ,@onKeyUp="CalculateNetTaxableAmount();",@onblur="CalculateTaxAmount();"})
                        </div>
                    </label>
                </div>*@

                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;"></legend>
                  <div style="height:75px; border: solid 1px #1C5183; position: relative; width: 1000px;">
                 <div class="row-fluid singleline">         
                            
                        
                    <label>
                        <div class="editor-label">
                            @Html.Label("SST Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.SSTAmount, new { @id = "SSTAmount" })

                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Label("Tax Amount")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TaxAmount, new { @id="TaxID"})
                        </div>
                    </label>
                </div>
                      </div>
                      </fieldset>

                <fieldset>
                 <legend style="font-size: medium; color: #1C5183; width: 1000px;"></legend>
                  <div style="height: 75px; border: solid 1px #1C5183; position: relative; width: 1000px;">
                    <div id="">
                   <div class="row-fluid singleline">                                      
                    <label>
                        <div class="editor-label">
                            @Html.Label("Budget")
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.BudgetID, Hospital.Utility.GetCOAExpenseHeadList())
                        </div>
                    </label>

                    <label>
                        <div class="editor-label">
                            @Html.Hidden("Fund")
                        </div>
                        <div class="editor-field">
                            @Html.HiddenFor(model => model.FundID)
                        </div>
                    </label>
                   
                    <label>
                        <div class="editor-label">
                            @Html.Label("Remarks")
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Remarks)
                        </div>
                    </label>

                </div>
                    </div>                           
                  </div>                 
                </fieldset>

                <div class="row-fluid singleline">
                    <div class="editor-label">
                        @Html.HiddenFor(model => model.CreatedDate)
                    </div>
                    <div class="editor-field">
                        @Html.HiddenFor(model => model.CreatedDate)
                        @Html.ValidationMessageFor(model => model.CreatedDate)
                    </div>

                    <div class="editor-label">
                        @Html.HiddenFor(model => model.CreatedBy)
                    </div>
                    <div class="editor-field">
                        @Html.HiddenFor(model => model.CreatedBy)
                        @Html.ValidationMessageFor(model => model.CreatedBy)
                    </div>

                    <div class="editor-label">
                        @Html.HiddenFor(model => model.Status)
                    </div>
                    <div class="editor-field">
                        @Html.HiddenFor(model => model.Status)
                        @Html.ValidationMessageFor(model => model.Status)
                    </div>
                </div>

                <div>
                    <br />
                    <p>
                        <input type="submit" value="Save" onclick="CalculateInsuranceAmount();"/>
                    </p>
                </div>                         
            </fieldset>
        }

    </div>
  
</div>


<script  type="text/javascript">

    $("#Add-Item").on('click', '.row-button', function () {
        $(this).closest("div.row").remove();
        CalculateTotalAmount();
    });

    $("#Add-Item1").on('click', '.row-button', function () {
        $(this).closest("div.row").remove();
        CalculateTotalAmount();
    });

    function Calculate() {
        CalculateGradeAmount();
        CalculatePfAmount();
        CalculateCitAmount();
    }

    function CalculateFundAndAdvance() {
        CalculateFundAmount();
        CalculateAdvanceAmount();
    }

    function CalculateTotalAmount() {
        var allSectors = $('.AllowanceClass');
        var DedSectors = $('.DeductionClass');
        // Calculate AllowanceClass 
        var totalAllowanceAmt = 0;
        var sectorAllowanceCount = 0;
        sectorAllowanceCount = $(allSectors).length;
        // Calculate DeductionClass
        var totalDeductionAmt = 0;
        var sectorDeductionCount = 0;
        sectorDeductionCount = $(DedSectors).length;
        for (var i = 0; i <= sectorAllowanceCount - 1; i++) {
            if (isNaN(parseFloat($(allSectors[i]).val())))
                $(allSectors[i]).val('0');
            totalAllowanceAmt += parseFloat($(allSectors[i]).val());
        }
        for (var i = 0; i <= sectorDeductionCount - 1; i++) {
            if (isNaN(parseFloat($(DedSectors[i]).val())))
                $(DedSectors[i]).val('0');

            totalDeductionAmt += parseFloat($(DedSectors[i]).val());
        }
        $('#TotalAllowance').val(totalAllowanceAmt);
        $('#TotalDeduction').val(totalDeductionAmt);
    };

    function CalculateGradeAmount() {
        var GradeNo = $('#GradeNoClass');
        var GradeRate = $('#GradeRateClass');
        var GradeAmount = 0;
        if (isNaN(parseFloat($(GradeRate).val())))
            $(GradeRate).val('0');
        if (isNaN(parseFloat($(GradeNo).val())))
            $(GradeNo).val('0');
        GradeAmount = parseFloat($(GradeNo).val()) * parseFloat($(GradeRate).val());
        $('#GradeAmountClass').val(GradeAmount);
    };

    function CalculatePfAmount() {
        var BasicSalary = $('#BasicSalaryClass');
        var GradeAmount = $('#GradeAmountClass');
        var PfAmount = 0;
        if (isNaN(parseFloat($(BasicSalary).val())))
            $(BasicSalary).val('0');
        if (isNaN(parseFloat($(GradeAmount).val())))
            $(GradeAmount).val('0');
        PfAmount = ((parseFloat($(BasicSalary).val()) + parseFloat($(GradeAmount).val())) * 10) / 100;
        $('#PFAmountClass').val(PfAmount);
        $('#PfDeductionClass').val(PfAmount * 2);
    };

    function CalculateTotalIncome() {
        var BasicSalary = $('#BasicSalaryClass');
        var GradeAmount = $('#GradeAmountClass');
        var PFAmountClass = $('#PFAmountClass');
        var InsuranceAmount = $('#InsuranceAmount');
        var FestivalAmount = $('#FestivalAmount');
        var OverTimeAmount = $('#OverTimeAmount');
        var TotalAllowance = $('#TotalAllowance');
        var DressAllowance = $('#DressAllowance');
        var DearnessAllowance = $('#DearnessAllowance');
        var TotalIncome = 0;
        if (isNaN(parseFloat($(BasicSalary).val())))
            $(BasicSalary).val('0');
        if (isNaN(parseFloat($(GradeAmount).val())))
            $(GradeAmount).val('0');
        if (isNaN(parseFloat($(PFAmountClass).val())))
            $(PFAmountClass).val('0');
        if (isNaN(parseFloat($(InsuranceAmount).val())))
            $(InsuranceAmount).val('0');
        if (isNaN(parseFloat($(FestivalAmount).val())))
            $(FestivalAmount).val('0');
        if (isNaN(parseFloat($(OverTimeAmount).val())))
            $(OverTimeAmount).val('0');
        if (isNaN(parseFloat($(TotalAllowance).val())))
            $(TotalAllowance).val('0');
        if (isNaN(parseFloat($(DressAllowance).val())))
            $(DressAllowance).val('0');
        if (isNaN(parseFloat($(DearnessAllowance).val())))
            $(DearnessAllowance).val('0');
        TotalIncome = parseFloat($(BasicSalary).val()) + parseFloat($(GradeAmount).val()) + parseFloat($(PFAmountClass).val()) + parseFloat($(InsuranceAmount).val()) + parseFloat($(TotalAllowance).val()) + parseFloat($(DearnessAllowance).val()) + parseFloat($(DressAllowance).val());
        TotalIncome = (TotalIncome * TotalNoOfMonth) + parseFloat($(FestivalAmount).val()) + parseFloat($(OverTimeAmount).val());
        $('#TotalIncomeAmount').val(toFixedOwn((TotalIncome), 2));
    };

    function CalculateTotalTaxableAmount() {
        var FundAmount = $('#FundAmount');
        var TotalDeduction = $('#TotalDeduction');
        var LeaveDeduction = $('#LeaveDeduction');
        var InsuranceDeductionAmount = $('#InsuranceDeductionAmount');
        var PfDeductionClass = $('#PfDeductionClass');
        var AdvanceDeduction = $('#AdvanceDeduction');
        var LoanInterest = $('#LoanInterest');
        var LoanDeduction = $('#LoanDeduction');
        var CitAmount = $('#CitAmount');
        var TotalIncomeAmount = $('#TotalIncomeAmount');
        var TotalTaxableAmount = 0;
        if (isNaN(parseFloat($(FundAmount).val())))
            $(FundAmount).val('0');
        if (isNaN(parseFloat($(TotalDeduction).val())))
            $(TotalDeduction).val('0');
        if (isNaN(parseFloat($(LeaveDeduction).val())))
            $(LeaveDeduction).val('0');
        if (isNaN(parseFloat($(InsuranceDeductionAmount).val())))
            $(InsuranceDeductionAmount).val('0');
        if (isNaN(parseFloat($(PfDeductionClass).val())))
            $(PfDeductionClass).val('0');
        if (isNaN(parseFloat($(LoanInterest).val())))
            $(LoanInterest).val('0');
        if (isNaN(parseFloat($(AdvanceDeduction).val())))
            $(AdvanceDeduction).val('0');
        if (isNaN(parseFloat($(CitAmount).val())))
            $(CitAmount).val('0');
        if (isNaN(parseFloat($(LoanDeduction).val())))
            $(LoanDeduction).val('0');
        if (isNaN(parseFloat($(TotalIncomeAmount).val())))
            $(TotalIncomeAmount).val('0');
        TotalTaxableAmount = parseFloat($(TotalDeduction).val()) +
                             parseFloat($(InsuranceDeductionAmount).val()) + parseFloat($(PfDeductionClass).val()) + parseFloat($(LoanInterest).val()) +
                             +parseFloat($(CitAmount).val()) + parseFloat($(LoanDeduction).val());
        $('#TotalTaxableAmount').val(toFixedOwn((parseFloat($(TotalIncomeAmount).val()) - (TotalTaxableAmount * TotalNoOfMonth)), 2) - parseFloat($(LeaveDeduction).val()));
    };

    function CalculateNetTaxableAmount() {
        var IPP = $('#IPP');
        var RAD = $('#RAD');
        var PhyDis = $('#PhyDis');
        var TotalTaxableAmount = $('#TotalTaxableAmount');
        var NetTaxableAmount = 0;
        if (isNaN(parseFloat($(IPP).val())))
            $(IPP).val('0');
        if (isNaN(parseFloat($(RAD).val())))
            $(RAD).val('0');
        if (isNaN(parseFloat($(PhyDis).val())))
            $(PhyDis).val('0');
        if (isNaN(parseFloat($(TotalTaxableAmount).val())))
            $(TotalTaxableAmount).val('0');
        NetTaxableAmount = parseFloat($(IPP).val()) + parseFloat($(RAD).val()) + parseFloat($(PhyDis).val());
        $('#NetTaxableAmount').val(toFixedOwn((parseFloat($(TotalTaxableAmount).val()) - (NetTaxableAmount)), 2));
    };

    function CalculateInsuranceAmount() {
        var IPP = $('#IPP');
        var InsuranceDeductionAmount = $('#InsuranceDeductionAmount');
        var InsuranceAmt = 0;
        if (isNaN(parseFloat($(IPP).val())))
            $(IPP).val('0');
        if (isNaN(parseFloat($(InsuranceDeductionAmount).val())))
            $(InsuranceDeductionAmount).val('0');
        InsuranceAmt = parseFloat($(IPP).val()) + (parseFloat($(InsuranceDeductionAmount).val() * 12));
        if (parseFloat(InsuranceAmt) > 20000) {
            alert("Insurance Amount Cannot be greater than 20000");
            return;
        }
    };

    function CalculateLeaveAmount() {
        var PresentDay = $('#PresentDay').val();
        var BasicSalary = $('#BasicSalaryClass').val();
        var GradeAmount = $('#GradeAmountClass').val();
        var DayOrHour = $('#OTHrDay').val();
        var TotalDay = 0;
        var TotalSalary = 0;
        $.post('@Url.Action("GetTotalNoOfDaysInMonth")', function (result) {
            TotalDay = (result.NoOfDays);
            var LeaveAmount = 0;
            if (isNaN(PresentDay))
                PresentDay = 0;
            if (isNaN(TotalDay))
                TotalDay = 0;
            if (isNaN(BasicSalary))
                BasicSalary = 0;
            if (isNaN(GradeAmount))
                GradeAmount = 0;
            TotalSalary = parseFloat(BasicSalary) + parseFloat(GradeAmount);
            var TotalLeave = parseFloat(TotalDay) - parseFloat(PresentDay);
            var OneDaySalary = parseFloat(TotalSalary) / parseFloat(TotalDay);
            LeaveAmount = OneDaySalary * TotalLeave;
            $('#LeaveDeduction').val(toFixedOwn(LeaveAmount, 2));
        })
    };

    function CalculateOvertime() {
        var OverTimeDuration = $('#OverTimeDuration').val();
        var BasicSalary = $('#BasicSalaryClass').val();
        var GradeAmount = $('#GradeAmountClass').val();
        var DayOrHour = $('#OTHrDay').val();
        var TotalDay = 0;
        var TotalSalary = 0;
        $.post('@Url.Action("GetTotalNoOfDaysInMonth")', function (result) {
            TotalDay = (result.NoOfDays);
            var OverTimeAmount = 0;
            if (isNaN(OverTimeDuration))
                OverTimeDuration = 0;
            if (isNaN(TotalDay))
                TotalDay = 0;
            if (isNaN(BasicSalary))
                BasicSalary = 0;
            if (isNaN(GradeAmount))
                GradeAmount = 0;
            TotalSalary = parseFloat(BasicSalary) + parseFloat(GradeAmount);
            var OneDaySalary = parseFloat(TotalSalary) / parseFloat(TotalDay);
            var TotalOverTime = parseFloat(OverTimeDuration) * parseFloat(1.5);
            OverTimeAmount = TotalOverTime * OneDaySalary;
            $('#OverTimeAmount').val(toFixedOwn(OverTimeAmount, 2));
        })
    };


    function CalculateTaxAmount() {
        var NetTaxableAmount = $("#NetTaxableAmount").val();
        var EmployeeID = $("#EmployeeID").val();
        $.post('@Url.Action("CalculateTax")', { Amount: NetTaxableAmount, EmpID: EmployeeID }, function (result) {
            $('#TaxID').val(toFixedOwn(result.TaxAmount / TotalNoOfMonth, 2));
            $('#SSTAmount').val(toFixedOwn(result.SSTAmount / TotalNoOfMonth, 2));
        });
    };


    function CalculateFundAmount() {
        var EmployeeID = $("#EmployeeID").val();
        var BasicSalary = $('#BasicSalaryClass').val();
        var GradeAmount = $('#GradeAmountClass').val();
        $.post('@Url.Action("GetEmployeeFundDeductAmount")', { EmpID: EmployeeID, BasicSalary: BasicSalary, GradeAmount: GradeAmount }, function (result) {
                $('#FundAmount').val(toFixedOwn(result.FundAmount, 2));
            });
        };


        function CalculateAdvanceAmount() {
            var EmployeeID = $("#EmployeeID").val();
            $.post('@Url.Action("GetEmployeeAdvanceAmount")', { EmpID: EmployeeID }, function (result) {
            $('#AdvanceDeduction').val(toFixedOwn(result.AdvanceAmount, 2));
        });
    };

    function GetTotalNoOfMonth() {
        var EmployeeID = $("#EmployeeID").val();
        $.post('@Url.Action("CalculateTotalMonth")', { EmpID: EmployeeID }, function (result) {
            TotalNoOfMonth = (toFixedOwn(result.Ttlmonth, 2));
            $('#Noofjoinmonth').val(toFixedOwn(result.Ttlmonth, 2));
        });
    };

    function CalculateCitAmount() {
        var BasicSalary = $('#BasicSalaryClass');
        var GradeAmount = $('#GradeAmountClass');
        var CitPercentage = $('#CitPercentage');
        var CitAmount = 0;
        if (isNaN(parseFloat($(BasicSalary).val())))
            $(BasicSalary).val('0');
        if (isNaN(parseFloat($(GradeAmount).val())))
            $(GradeAmount).val('0');
        if (isNaN(parseFloat($(CitPercentage).val())))
            $(CitPercentage).val('0');
        CitAmount = parseFloat($(BasicSalary).val()) + parseFloat($(GradeAmount).val());
        CitAmount = (parseFloat(CitAmount) * parseFloat($(CitPercentage).val())) / 100;
        $('#CitAmount').val(CitAmount);
    };

</script>

 <script type="text/javascript">
     function toFixedOwn(num, fixed) {
         fixed = fixed || 0;
         fixed = Math.pow(10, fixed);
         return Math.floor(num * fixed) / fixed;
     };

</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}



