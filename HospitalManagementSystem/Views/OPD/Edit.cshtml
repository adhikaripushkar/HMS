@model HospitalManagementSystem.Models.OpdModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_OpdLayOut.cshtml";
}


<style>
    select {
        width: 211px;
        height: 27px;
    }
</style>


<style>
    table#mytbl,
    table#mytbl td {
        width: 880px;
        border: none !important;
    }
</style>



<script src="~/Scripts/OrderManagerScript.js"></script>

<script type="text/javascript">

    $(document).ready(function () {
        AddClickEvents();
    });

</script>



<h2 style="text-align: center;">OPD Department@{
    if (Session["OpdTypeIdInt"] != null)
    {
        if ((int)Session["OpdTypeIdInt"] == 1)
        {
    @:<span style="color:#8cb4c8;font-size:12px;">(General)</span>
            }
        else
        {
    @:<span style="color:#8cb4c8;font-size:12px;">(Payable)</span>
            }
    }

    else
    {
    @:<span style="color:#8cb4c8;font-size:12px;">(General)</span>
        }
}

</h2>

<div class="contentWrapper">

    @using (Html.BeginForm("Edit", "Opd", FormMethod.Post, new { @class = "bs-docs-example form-inline" }))
    {
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.OpdID)
   
    
        <fieldset>
            <legend>Edit</legend>

            <div class="row-fluid singleline">

                <label>
                <h4>Is Member</h4>
                 <span style="width: 211px; height: 27px;">@Html.DropDownList("srchVal", HospitalManagementSystem.Utility.GetOpdSearchDDLCrt(), new { @class = "srchValcls" })</span>
            </label>
                    <label>
                <div class="size">@Html.ValidationMessageFor(model => model.CountryID)</div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CountryID)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.CountryID, HospitalManagementSystem.Utility.GetCountryNameList(), new { @id = "CountryID", @readonly="readonly" })
                </div>

            </label>

                </div>

                <div class="row-fluid singleline">

                <label>

                    <span class="size">@Html.ValidationMessageFor(model => model.FirstName)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.FirstName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.FirstName, new {@readonly="readonly" })

                    </div>

                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.MiddleName)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MiddleName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.MiddleName, new { @readonly="readonly"})

                    </div>

                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.LastName)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.LastName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.LastName,new { @readonly="readonly"})

                    </div>

                </label>


                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.Sex)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Sex)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.Sex, HospitalManagementSystem.Utility.GetGenderList(),new { @readonly="readonly"})

                    </div>

                </label>
            </div>

            <div class="row-fluid singleline">

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.ContactName)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.ContactName)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.ContactName,new { @readonly="readonly"})

                    </div>

                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.MobileNumber)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MobileNumber)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.MobileNumber,new { @readonly="readonly"})

                    </div>

                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.RegistrationDate)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.RegistrationDate)
                    </div>
                    <div class="editor-field">
                        @* @Html.TextBoxFor(model =>model.RegistrationDate, new { @readonly=true,type="Date"})*@



                        @Html.TextBoxFor(model => model.RegistrationDate, @Model.RegistrationDate.ToShortDateString(), new { @readonly = true })



                    </div>
                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.AgeYear)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.AgeYear)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.AgeYear,new { @readonly="readonly"})

                    </div>
                </label>


                <label>

                    <span class="size">@Html.ValidationMessageFor(model => model.RegistrationMode)</span>
                    <div class="editor-label">
                        @Html.HiddenFor(model => model.RegistrationMode)
                    </div>
                    <div class="editor-field">
                        @Html.HiddenFor(model => model.RegistrationMode, HospitalManagementSystem.Utility.RegistrationModeList())

                    </div>

                </label>

            </div>

            <div class="row-fluid singleline">
            </div>

            <div class="row-fluid singleline">

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.MaritalStatus)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MaritalStatus)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.MaritalStatus, HospitalManagementSystem.Utility.MatitalStatusList(),new { @readonly="readonly"})

                    </div>
                </label>

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.BloodGroup)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.BloodGroup)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.BloodGroup, HospitalManagementSystem.Utility.BloodGroupList(), "select",new { @readonly="readonly"})

                    </div>
                </label>


               @* <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.MemberTypeID)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.MemberTypeID)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.MemberTypeID, HospitalManagementSystem.Utility.GetAllMemberType(), "select")

                    </div>
                </label>*@



                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.Address)</span>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.Address)
                    </div>

                    <div class="editor-field">

                        @Html.TextBoxFor(mod => mod.Address,new { @readonly="readonly"})

                    </div>
                </label>

            </div>
            <div class="row-fluid singleline">

                <label>
                    <span class="size">@Html.ValidationMessageFor(model => model.Email)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Email)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Email,new { @readonly="readonly"})

                    </div>

                </label>
                <label style="display:none;">
                    <span class="size">@Html.ValidationMessageFor(model => model.Status)</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Status)
                    </div>
                    <div class="editor-field">
                        &nbsp;&nbsp;&nbsp;&nbsp;@Html.EditorFor(model => model.Status)

                    </div>
                </label>


            </div>
        </fieldset>
        <fieldset>
            <legend>Doctor Selection</legend>
            <div class="well well-small" id="Add-Item">

                @*@Html.ActionLink("Add More", "AddDoctorList", null, new { @class = "addProductItem btn btn-primary" })*@
                <table id="mytbl">
                    <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;Department</td>
                        <td>Doctor</td>
                        <td>Prefer Date</td>
                        <td>Prefer Time</td>
                    </tr>
                </table>
                <table>
                    @foreach (var item in Model.OpdDoctorList)
                    {
                        <tr>
                            @Html.Partial("AddDoctorList", item)
                        </tr>
                    }

                </table>
            </div>
        </fieldset>
        <fieldset>
            <legend>Bill Details</legend>
            @* <div class="row-fluid singleline">
                <label>
                    <span class="size"></span>
                    <div class="editor-label">
                        @Html.Label("Other Discount")
                    </div>
                    <div class="editor-field">
                        @Html.DropDownList("ddOtherDisPercentage", HospitalManagementSystem.Utility.GetOtherDiscountForDropDown(), "Select--One", new { onchange = "getOtherDiscountPercentage()" })

                    </div>
                </label>
            </div>*@

            <div class="row-fluid singleline">
                <label>
                    <span class="size">@*@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.RegistrationFee)*@</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OpdFeeDetailsModel.RegistrationFee)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.RegistrationFee, new { @id = "txtRegistrationFee", @onkeyup = "onchangeevent();", @readonly="readonly"})

                    </div>
                </label>

                <label>
                    <span class="size">@*@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.DoctorFee)*@</span>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OpdFeeDetailsModel.DoctorFee)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.DoctorFee, new { @id = "txtDoctorFee", @onkeyup = "onchangeevent();", @readonly="readonly" })

                    </div>

                </label>

                <label>
                    <div class="size">@*@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.MemberDiscountAmount)*@</div>
                    <div class="editor-label">
                        @*@Html.LabelFor(model => model.OpdFeeDetailsModel.MemberDiscountAmount)*@
                        Member Discount(%)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.MemberDiscountAmount, new { @id = "txtMemberDiscountAmount", @onkeyup = "onchangeevent();", @readonly="readonly" })

                    </div>

                </label>

                @* <div class="editor-label">
            @Html.LabelFor(model => model.OpdFeeDetailsModel.OtherDiscountPercentage)
        </div>

        <div class="editor-field">
            @Html.EditorFor(model =>  model.OpdFeeDetailsModel.OtherDiscountPercentage)
            @Html.ValidationMessageFor(model =>  model.OpdFeeDetailsModel.OtherDiscountPercentage)
        </div>*@

                <label>
                    <div class="size">@*@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.OtherDiscountAmount)*@</div>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OpdFeeDetailsModel.OtherDiscountAmount)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.OtherDiscountAmount, new { @id = "txtOtherDiscountAmount", @onkeyup = "onchangeevent();", @readonly="readonly" })

                    </div>
                </label>

            </div>

            <div class="row-fluid singleline">
                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.TotalAmount)</div>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OpdFeeDetailsModel.TotalAmount)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.TotalAmount, new { @id = "txtTotalAmount", @readonly="readonly" })

                    </div>
                </label>

                <label>
                    <div class="size">@Html.ValidationMessageFor(model => model.OpdFeeDetailsModel.Remarks)</div>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OpdFeeDetailsModel.Remarks)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OpdFeeDetailsModel.Remarks, new {@readonly="readonly"})

                    </div>

                </label>
            </div>


        </fieldset>
        <div>
            <p>
                <input type="submit" value="Edit" />
            </p>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index", null, new { @id = "linkNewBack" })
    </div>








    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

    <script type="text/javascript">
        $("#Add-Item").on('click', '.row-button', function () {
            $(this).closest("div.rowr").remove();
        });

    </script>

    <script type="text/javascript">

        $("#Add-Item").on('change', '.DepartmentID', function () {
            var id = this.id;

            id = id.replace("__DepartmentID", "__DoctorID");
            $('#' + id).val('');


            $.get('/AjaxRequest/GetDoctorNameList/' + this.value,
                  function (data) {
                      $('#' + id).find('option').remove()
                      $(data).each(
                          function (index, item) {
                              $('#' + id).append('<option value="' + item.Value + '">' + item.Text + '</option>')
                          });
                  }
        );
        });

    </script>

    <script type="text/javascript">
        function JqueryAjaxLoadSelectOption(selValue, targetElm, url) {

            $.ajax({
                async: false,
                type: "POST",
                url: url + selValue,
                contentType: "text/json",
                data: ({ id: selValue }),
                beforeSend: function () {
                    $("#" + targetElm).attr('disabled', 'disabled');
                    $("#" + targetElm).addClass('ac_loading');
                },

                success: function (jsonResult) {
                    var evlResult = JSON.retrocycle(jsonResult);
                    var selOption = "";
                    selOption = ParseJsonResultForSelectOptions(evlResult);
                    tempTargetElm = targetElm.split(',');
                    for (var i = 0; i < tempTargetElm.length; i++) {
                        // alert(tempTargetElm.length + " : " + tempTargetElm[i]);
                        $("#" + tempTargetElm[i]).empty().append(selOption);
                        $("#" + tempTargetElm[i]).removeClass('ac_loading');
                        $("#" + tempTargetElm[i]).removeAttr('disabled');
                    }


                },
                error: function (jsonResult) {
                }
            });

            function ParseJsonResultForSelectOptions(evlResult) {
                var selOption = "";
                $.each(evlResult, function (key, item) {
                    var isSelected = (item['Selected'] == "true") ? "Selected='Selected'" : "";
                    //var otherAttrib = (item['Attribs']!=undefined)? item['Attribs']:"";
                    var otherAttrib = "";
                    $.each(item, function (name, value) {
                        if (name != 'Selected' && name != 'Value' && name != 'Text') {
                            otherAttrib += " " + name + '="' + value + '" ';
                        }
                    });
                    selOption += "<option value='" + item['Value'] + "' " + isSelected + " " + otherAttrib + " >"
                    + evlResult[key].Text + "</option>";
                });
                return selOption;
            }

        }
    </script>
    <script type="text/javascript">

        function onchangeevent() {
            //$('#txtMiddleName').val($('#txtid').val + 3);
            //var b = $("#textbox2").val();
            //if ($("#txtMiddleName").is(":checked")) {
            //}
            // $("#txtMiddleName").hide();
            // $("#txtMiddleName").show();
            //var a = $("#txtid").val();
            //var a = $("#txtid").val();
            //var total = parseInt(a) + 2;
            //$("#txtMiddleName").val(total);

            var vartxtRegistrationFee = $("#txtRegistrationFee").val();
            var vartxtDoctorFee = $("#txtDoctorFee").val();
            var vartxtMemberDiscountAmount = $("#txtMemberDiscountAmount").val();
            var vartxtOtherDiscountAmount = $("#txtOtherDiscountAmount").val();
            var varTotal = 0;
            var varDiscount = 0;

            if (vartxtRegistrationFee == '') {
                vartxtRegistrationFee = 0;
            }
            if (vartxtDoctorFee == '') {
                vartxtDoctorFee = 0;
            }
            if (vartxtMemberDiscountAmount == '') {
                vartxtMemberDiscountAmount = 0;
            }
            if (vartxtOtherDiscountAmount == '') {
                vartxtOtherDiscountAmount = 0;
            }
            if (vartxtOtherDiscountAmount == '') {
                vartxtOtherDiscountAmount = 0;
            }
            varTotal = parseInt(vartxtRegistrationFee) + parseInt(vartxtDoctorFee);
            varDiscount = parseInt(vartxtMemberDiscountAmount) + parseInt(vartxtOtherDiscountAmount);
            var varTotalAmount = parseInt(varTotal) - parseInt(varDiscount);
            // alert(vartxtRegistrationFee);
            $("#txtTotalAmount").val(varTotalAmount);
        }
    </script>


    <script>

        $('.DoctorID').change(function (e) {

            e.preventDefault();



            $.get('/opd/GetDoctorFeeWithId/' + this.value,
            function (data) {

                var fee = parseInt(data);

                $('#txtDoctorFee').val(fee);

                var vartxtRegistrationFee = $("#txtRegistrationFee").val();
                var vartxtDoctorFee = $("#txtDoctorFee").val();
                var vartxtMemberDiscountAmount = $("#txtMemberDiscountAmount").val();
                var vartxtOtherDiscountAmount = $("#txtOtherDiscountAmount").val();

                if (vartxtRegistrationFee == '') {
                    vartxtRegistrationFee = 0;
                }
                if (vartxtDoctorFee == '') {
                    vartxtDoctorFee = 0;
                }
                if (vartxtMemberDiscountAmount == '') {
                    vartxtMemberDiscountAmount = 0;
                }
                if (vartxtOtherDiscountAmount == '') {
                    vartxtOtherDiscountAmount = 0;
                }
                if (vartxtOtherDiscountAmount == '') {
                    vartxtOtherDiscountAmount = 0;
                }
                varTotal = parseFloat(vartxtRegistrationFee) + parseFloat(vartxtDoctorFee);

                var MemdiscAmt = parseFloat(varTotal) * parseFloat(vartxtMemberDiscountAmount) / 100;


                varDiscount = parseFloat(MemdiscAmt) + parseFloat(vartxtOtherDiscountAmount);
                var varTotalAmount = parseFloat(varTotal) - parseFloat(varDiscount);


                if (varTotalAmount < 0) {
                    $("#txtTotalAmount").val(0);
                }
                else {
                    $("#txtTotalAmount").val(parseFloat(varTotalAmount.toFixed(2)));
                }






            });
        });

    </script>



    <script>

        var dlg = $.noConflict();

        dlg('.srchValcls').change(function (e) {

            e.preventDefault();

            // alert("hi");

            //alert(this.value);

            if (this.value == "") {

                window.location = "/Opd/Create";

            }
            else {

                var val = dlg('.srchValcls').val();

                //alert(val);

                var url = "/Opd/_SearchOption";

                //alert(url);

                dlg.get(url, null, function (data) {


                    dlg('#memsrch').html(data);

                    dlg(function () {

                        dlg("#memsrch").dialog({
                            position: [290, 190],
                            resizable: true,
                            overFlow: scroll,
                            minWidth: 1000,
                            maxWidth: 1000,
                            maxHeight: 200,


                            title: "Search Member Ship",

                            close: function () {

                                window.location = "/Opd/Create";
                                //$(this).remove()
                            }
                            //modal: true

                        });

                    });


                });

            }
        });





</script>


</div>
