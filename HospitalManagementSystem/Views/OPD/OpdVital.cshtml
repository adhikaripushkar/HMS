@model HospitalManagementSystem.Models.VitalForOthersModel

@{
    ViewBag.Title = "OpdVital";
    Layout = "~/Views/Shared/_OpdLayOut.cshtml";
}

<h2 style="text-align: center;">OPD Vital</h2>

@*Required Js and Css For TimePicker*@

<link href="~/Content/themes/base/jquery.ui.timepicker.css" rel="stylesheet" />
<script src="~/Scripts/jquery.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery.ui.timepicker.js"></script>

@*---------------------------*@

<script>


    var j = $.noConflict();
    j(function () {
        j("#Date").datepicker();
        j("#VTime").timepicker();
    });





</script>




<div class="contentWrapper">


    @if (TempData["Success"] == HospitalManagementSystem.UtilityMessage.save)
    {

        <div class="alert">@TempData["Success"]</div>
    
    }

    @if (TempData["Success"] == HospitalManagementSystem.UtilityMessage.savefailed)
    {

        <div class="alert">@TempData["Success"]</div>
    
    }


    @if (TempData["Success"] == HospitalManagementSystem.UtilityMessage.edit)
    {

        <div class="alert">@TempData["Success"]</div>
    
    }

    @if (TempData["Success"] == HospitalManagementSystem.UtilityMessage.editfailed)
    {

        <div class="alert alert-error">@TempData["Success"]</div>
    
    }


    @MyHelpers.PatientInfoWithOpdId(Model.OpdId)

    <hr />
    <table style="width: 100%;">
        <tr>

            <th>
                @*@Html.DisplayNameFor(model => model.OpdId)*@
                Patient ID
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AVPU)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Pulse)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BP_Left)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BP_Right)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RR)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SPO2)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TPR)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Wt)
            </th>
            <th>Height
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BMI)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.VTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Staff)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Department)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PatinetLogId)
            </th>
            <th>Action</th>
        </tr>

        @foreach (var item in Model.lstOfVitalForOthersModel)
        {
            <tr>

                <td>
                    @Html.DisplayFor(modelItem => item.OpdId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AVPU)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Pulse)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BP_Left)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BP_Right)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RR)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SPO2)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TPR)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Wt)
                </td>
                <td>
                    @*@Html.DisplayFor(modelItem => item.height)*@

                    @item.Feet<sup>'</sup>@item.Inch<sup>"</sup>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BMI)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Staff)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Department)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PatinetLogId)
                    @Html.HiddenFor(modelItem => item.PatinetLogId, new { @id = "patienLogId" })
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", null, new { id = item.VitalForOtherId, @class = "editVitalRecords" })

                </td>
            </tr>
        }


    </table>

    <br />

    <div id="getForm">
    </div>


    @if (Model.lstOfVitalForOthersModel.Count < 1)
    {

        using (Html.BeginForm())
        {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <div class="bs-docs-example form-inline">
            <fieldset>
                <legend>OPD Vital</legend>



                <label>
                    <div class="editor-label">
                        @Html.HiddenFor(model => model.OpdId)
                    </div>
                    <div class="editor-field">
                        @Html.HiddenFor(model => model.OpdId, new { @readonly = "true" })
                        @Html.ValidationMessageFor(model => model.OpdId)
                    </div>
                </label>
                <div class="row-fluid singleline">


                    <label>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.AVPU)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.AVPU)
                            @Html.ValidationMessageFor(model => model.AVPU)
                        </div>
                    </label>
                    <label>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Pulse)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Pulse)
                            @Html.ValidationMessageFor(model => model.Pulse)
                        </div>
                    </label>
                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.BP_Left)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.BP_Left)
                            @Html.ValidationMessageFor(model => model.BP_Left)
                        </div>
                    </label>

                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.BP_Right)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.BP_Right)
                            @Html.ValidationMessageFor(model => model.BP_Right)
                        </div>
                    </label>


                </div>

                <div class="row-fluid singleline">
                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.RR)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.RR)
                            @Html.ValidationMessageFor(model => model.RR)
                        </div>
                    </label>

                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.SPO2)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.SPO2)
                            @Html.ValidationMessageFor(model => model.SPO2)
                        </div>
                    </label>
                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.TPR)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.TPR)
                            @Html.ValidationMessageFor(model => model.TPR)
                        </div>
                    </label>
                    <label>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Wt)<span>(kg)</span>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Wt, new { @id = "wtId", @onkeyup = "onchangeevent();" })
                            @Html.ValidationMessageFor(model => model.Wt)
                        </div>
                    </label>

                    <br />
                    <fieldset>
                        <h6>Height</h6>

                        <label>

                            <div class="editor-label">
                                @Html.Label("CM")
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("CentiM", null, new { @onkeyup = "convfromcmeters()" })

                            </div>
                        </label>

                        <label>

                            <div class="editor-label">
                                @Html.LabelFor(model => model.Feet)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Feet, new { @id = "FeetId", @onkeyup = "onchangeevent();", @style = "width:90px;" })
                                @Html.ValidationMessageFor(model => model.Feet)
                            </div>
                        </label>
                        <label>

                            <div class="editor-label">
                                @Html.LabelFor(model => model.Inch)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Inch, new { @id = "inchId", @onkeyup = "onchangeevent();", @style = "width:90px;" })
                                @Html.ValidationMessageFor(model => model.Inch)
                            </div>
                        </label>

                        <label>

                            <div class="editor-label">
                                @Html.LabelFor(model => model.BMI)
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.BMI, new { @id = "BMIId" })
                                @Html.ValidationMessageFor(model => model.BMI)
                            </div>


                        </label>

                        <label>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.Date)
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.Date)
                                @Html.ValidationMessageFor(model => model.Date)
                            </div>
                        </label>
                        <label>

                            <div class="editor-label">
                                @Html.LabelFor(model => model.VTime)
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.VTime)
                                @Html.ValidationMessageFor(model => model.VTime)
                            </div>
                        </label>

                    </fieldset>


                </div>
                <div class="row-fluid singleline">


                    <label>

                        <div class="editor-label">
                            Elergery To Drugs
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.ElergeryToDrugs)
                            @Html.ValidationMessageFor(model => model.ElergeryToDrugs)
                        </div>
                    </label>


                    <label>
                        <div class="editor-label">
                            @Html.HiddenFor(model => model.PatinetLogId)
                        </div>
                        <div class="editor-field">
                            @Html.HiddenFor(model => model.PatinetLogId, new { @readonly = "true" })
                            @Html.ValidationMessageFor(model => model.PatinetLogId)
                        </div>
                    </label>

                </div>



                <p>
                    <input type="submit" value="Create" />
                </p>
            </fieldset>
        </div>
        }


    }
    <div id="linkNewBack">
        @Html.ActionLink("Back to List", "Index")
    </div>




</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    var jqncong = $.noConflict();
    jqncong('.editVitalRecords').on('click', function (e) {

        e.preventDefault();

        //alert(this.id);
        //alert(jqncong('#patienLogId').val());

        jqncong.get("/Opd/EditVital/", { id: this.id }, function (res) {

            jqncong("#getForm").html(res);

        });



    });


    var nocj = $.noConflict();

    nocj("#wtId").on("focusout", function (e) {

        e.preventDefault();


    });


    function onchangeevent() {

        var wt = $("#wtId").val();

        var wtinPound = parseInt(wt) * 2.20;


        var feet = $("#FeetId").val();
        var inch = $("#inchId").val();


        var feetintoinch = parseInt(feet) * 12;

        var totalheight = parseInt(feetintoinch) + parseInt(inch);



        var Bmi = parseInt(wtinPound) / (parseInt(totalheight) * parseInt(totalheight)) * 703;

        //  alert(Bmi.toFixed(1));

        if (Bmi.toFixed(1) != Infinity && Bmi.toFixed(1) != NaN) {

            $("#BMIId").val(Bmi.toFixed(1));

        }
        else {

            // alert("hi");
            $("#BMIId").val(0);
        }
    }







</script>

<script>
    function convfromcmeters() {

        var cm2;
        var feet2;
        var inches2;
        var CentiMeters = $("#CentiM").val();
        var WeightDtls = $("#wtId").val();
        //alert(CentiMeters);
        //if (isNaN(this.va)) {
        //    alert("Please enter numbers only");
        //    return false;
        //}
        inches2 = ((CentiMeters) * .39370078740157477);
        if (inches2 == 0) {
            alert("Please enter valid values into the boxes");
        }
        meters = CentiMeters / 100;
        $("#FeetId").val(parseInt(inches2 / 12));

        $("#inchId").val(inches2 % 12);
        onchangeevent();
    }
</script>
